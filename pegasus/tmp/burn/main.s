;
; File generated by cc65 v 2.13.3
;
	.fopt		compiler,"cc65 v 2.13.3"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_spr
	.import		_pal_col
	.import		_pal_bright
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_meta_spr
	.import		_ppu_waitnmi
	.import		_music_play
	.import		_music_stop
	.import		_sfx_play
	.import		_pad_poll
	.import		_rand8
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_fill
	.import		_vram_write
	.import		_unrle_vram
	.import		_memcpy
	.import		_memfill
	.import		_delay
	.export		_test
	.export		_palSprites
	.export		_put_str
	.export		_screen_fade_out
	.export		_screen_fade_in
	.export		_init_screen
	.export		_init
	.export		_is_pressed
	.export		_screen_title_color_18
	.export		_screen_title_color_19
	.export		_screen_title
	.import		_music_sarabande
	.import		_music_battle
	.export		_game_nmi_init
	.export		_sprite
	.export		_main

.segment	"DATA"

_block:
	.word	$0000
	.word	$0000
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$80
_wave:
	.word	$0000
	.word	$0000
	.byte	$00
	.byte	$00
	.byte	$51
	.byte	$00
	.byte	$80
_mountain:
	.word	$0000
	.word	$0000
	.byte	$00
	.byte	$00
	.byte	$52
	.byte	$00
	.byte	$80
_ruby:
	.word	$0000
	.word	$0000
	.byte	$00
	.byte	$00
	.byte	$53
	.byte	$00
	.byte	$80
_star:
	.word	$0000
	.word	$0000
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$55
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$56
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$57
	.byte	$00
	.byte	$80
_player:
	.word	$0000
	.word	$0000
	.byte	$00
	.byte	$00
	.byte	$58
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$59
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$5A
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$5B
	.byte	$00
	.byte	$80
_boss:
	.word	$0000
	.word	$0000
	.byte	$00
	.byte	$00
	.byte	$5C
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$5D
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$5E
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$5F
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$60
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$61
	.byte	$00
	.byte	$80

.segment	"RODATA"

_test:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$A3
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$42
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$10
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$10
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$46
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$DE
	.byte	$50
	.byte	$01
	.byte	$07
	.byte	$55
	.byte	$01
	.byte	$07
	.byte	$A5
	.byte	$01
	.byte	$07
	.byte	$AA
	.byte	$01
	.byte	$0F
	.byte	$0A
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$00
_palSprites:
	.byte	$0F
	.byte	$17
	.byte	$27
	.byte	$37
	.byte	$0F
	.byte	$11
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$15
	.byte	$25
	.byte	$35
	.byte	$0F
	.byte	$19
	.byte	$29
	.byte	$39
_screen_title_color_18:
	.byte	$01
	.byte	$AA
	.byte	$01
	.byte	$1F
	.byte	$01
	.byte	$00
_screen_title_color_19:
	.byte	$01
	.byte	$FF
	.byte	$01
	.byte	$0F
	.byte	$01
	.byte	$00
_screen_title:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$50
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$50
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$50
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$50
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$50
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$24
	.byte	$53
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$53
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$53
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$53
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$53
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$53
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$53
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$53
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$53
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$53
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$53
	.byte	$00
	.byte	$53
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$53
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$53
	.byte	$00
	.byte	$53
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$53
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$53
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$53
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$53
	.byte	$00
	.byte	$53
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$53
	.byte	$00
	.byte	$53
	.byte	$00
	.byte	$53
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$53
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$53
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$53
	.byte	$00
	.byte	$53
	.byte	$00
	.byte	$53
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$53
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$53
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$53
	.byte	$00
	.byte	$53
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$53
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$53
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$53
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$53
	.byte	$00
	.byte	$53
	.byte	$00
	.byte	$53
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$53
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$53
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$53
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$53
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$53
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$53
	.byte	$00
	.byte	$53
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$53
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$53
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$53
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$22
	.byte	$01
	.byte	$00
_game_nmi_init:
	.byte	$20
	.byte	$42
	.byte	$00
	.byte	$20
	.byte	$43
	.byte	$00
	.byte	$20
	.byte	$44
	.byte	$00
	.byte	$20
	.byte	$45
	.byte	$00
	.byte	$20
	.byte	$46
	.byte	$00
	.byte	$20
	.byte	$47
	.byte	$00
	.byte	$20
	.byte	$48
	.byte	$00
	.byte	$20
	.byte	$49
	.byte	$00
	.byte	$20
	.byte	$4A
	.byte	$00
	.byte	$20
	.byte	$4B
	.byte	$00
	.byte	$20
	.byte	$4C
	.byte	$00
	.byte	$20
	.byte	$4D
	.byte	$00
	.byte	$20
	.byte	$4E
	.byte	$00
	.byte	$20
	.byte	$4F
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$00
	.byte	$20
	.byte	$51
	.byte	$00
	.byte	$20
	.byte	$52
	.byte	$00
	.byte	$20
	.byte	$53
	.byte	$00
	.byte	$20
	.byte	$54
	.byte	$00
	.byte	$20
	.byte	$55
	.byte	$00
	.byte	$20
	.byte	$56
	.byte	$00
	.byte	$20
	.byte	$57
	.byte	$00
	.byte	$20
	.byte	$58
	.byte	$00
	.byte	$20
	.byte	$59
	.byte	$00
L0001:
	.byte	$50,$52,$45,$53,$53,$20,$53,$54,$41,$52,$54,$00,$31,$53,$54,$20
	.byte	$53,$54,$41,$47,$45,$00,$4F,$55,$54,$42,$52,$45,$41,$4B,$00,$32
	.byte	$4E,$44,$20,$53,$54,$41,$47,$45,$00,$42,$52,$4F,$4B,$45,$4E,$20
	.byte	$54,$49,$4D,$45,$00,$33,$52,$44,$20,$53,$54,$41,$47,$45,$00,$4F
	.byte	$55,$54,$20,$4F,$46,$20,$43,$4F,$4E,$54,$52,$4F,$4C,$00,$46,$49
	.byte	$4E,$41,$4C,$20,$53,$54,$41,$47,$45,$00,$43,$52,$41,$53,$48,$00
	.byte	$48,$45,$4C,$4C,$4F,$00,$59,$4F,$55,$20,$4C,$4F,$53,$45,$00,$59
	.byte	$4F,$55,$20,$57,$49,$4E,$00

.segment	"BSS"

_vram_buffer:
	.res	896,$00
_spr:
	.res	1,$00
_frame:
	.res	1,$00
_color_flag:
	.res	1,$00
_speed:
	.res	1,$00
_score:
	.res	1,$00
_time:
	.res	1,$00
_is_attacking:
	.res	1,$00
_stage:
	.res	1,$00
_delta:
	.res	1,$00
_game_nmi_list:
	.res	72,$00

; ---------------------------------------------------------------
; void __near__ put_str (unsigned int, __near__ const unsigned char*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_put_str: near

.segment	"CODE"

;
; vram_adr(adr);
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _vram_adr
;
; if(!*str) break;
;
L014C:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	jeq     incsp4
;
; vram_put((*str++)-0x20); //-0x20 because ASCII code 0x20 is placed in tile 0 of the CHR
;
	iny
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0154
	inx
L0154:	jsr     stax0sp
	ldy     #$00
	lda     (regsave),y
	sec
	sbc     #$20
	jsr     _vram_put
;
; }
;
	jmp     L014C

.endproc

; ---------------------------------------------------------------
; void __near__ screen_fade_out (int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_screen_fade_out: near

.segment	"CODE"

;
; unsigned char i=0x05;
;
	lda     #$05
	jsr     pusha
;
; i--;
;
L0158:	ldy     #$00
	lda     (sp),y
	sec
	sbc     #$01
	sta     (sp),y
;
; pal_bright(i);
;
	jsr     _pal_bright
;
; delay(interval);
;
	ldy     #$01
	lda     (sp),y
	jsr     _delay
;
; if (i==0){
;
	ldy     #$00
	lda     (sp),y
	bne     L0158
;
; break;
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ screen_fade_in (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_screen_fade_in: near

.segment	"CODE"

;
; unsigned char i=0x00;
;
	lda     #$00
	jsr     pusha
;
; i++;
;
L0164:	ldy     #$00
	lda     (sp),y
	clc
	adc     #$01
	sta     (sp),y
;
; pal_bright(i);
;
	jsr     _pal_bright
;
; delay(5);
;
	lda     #$05
	jsr     _delay
;
; if (i==4){
;
	ldy     #$00
	lda     (sp),y
	cmp     #$04
	bne     L0164
;
; break;
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ init_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_screen: near

.segment	"CODE"

;
; memfill(vram_buffer, 0, 896); // 896:32*28
;
	jsr     decsp3
	lda     #<(_vram_buffer)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_vram_buffer)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	ldx     #$03
	lda     #$80
	jsr     _memfill
;
; vram_write((unsigned char *)vram_buffer, NTADR(0, 1), 32 * 28);
;
	jsr     decsp4
	lda     #<(_vram_buffer)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_vram_buffer)
	sta     (sp),y
	lda     #$20
	ldy     #$00
	sta     (sp),y
	iny
	sta     (sp),y
	ldx     #$03
	lda     #$80
	jmp     _vram_write

.endproc

; ---------------------------------------------------------------
; void __near__ init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init: near

.segment	"CODE"

;
; pal_spr(palSprites);//set palette for sprites
;
	lda     #<(_palSprites)
	ldx     #>(_palSprites)
	jsr     _pal_spr
;
; pal_col(1,0x30);//set while color
;
	lda     #$01
	jsr     pusha
	lda     #$30
	jmp     _pal_col

.endproc

; ---------------------------------------------------------------
; int __near__ is_pressed (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_is_pressed: near

.segment	"CODE"

;
; i=pad_poll(0);
;
	jsr     decsp1
	lda     #$00
	jsr     _pad_poll
	ldy     #$00
	sta     (sp),y
;
; return i&pad;
;
	ldx     #$00
	iny
	lda     (sp),y
	dey
	and     (sp),y
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ sprite (__near__ struct $anon-struct-0001*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_sprite: near

.segment	"CODE"

;
; spr=oam_meta_spr(data->x,data->y,spr,data->pattern);
;
	jsr     decsp3
	ldy     #$04
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ldy     #$02
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     ptr1
	stx     ptr1+1
	dey
	lda     (ptr1),y
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$04
	bcc     L0539
	inx
L0539:	jsr     _oam_meta_spr
	sta     _spr
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; init();
;
	jsr     _init
;
; frame=0;
;
	lda     #$00
	sta     _frame
;
; color_flag=0;
;
	sta     _color_flag
;
; speed=0x3;
;
	lda     #$03
	sta     _speed
;
; score=0;
;
	lda     #$00
	sta     _score
;
; time=0xf;
;
	lda     #$0F
	sta     _time
;
; is_attacking=0;
;
	lda     #$00
	sta     _is_attacking
;
; stage=0x1;
;
	lda     #$01
	sta     _stage
;
; delta=0;
;
	lda     #$00
	sta     _delta
;
; pal_col(0,0x38);
;
	jsr     pusha
	lda     #$38
	jsr     _pal_col
;
; pal_col(5,0x22);
;
	lda     #$05
	jsr     pusha
	lda     #$22
	jsr     _pal_col
;
; pal_col(6,0x22);
;
	lda     #$06
	jsr     pusha
	lda     #$22
	jsr     _pal_col
;
; pal_col(7,0x22);
;
	lda     #$07
	jsr     pusha
	lda     #$22
	jsr     _pal_col
;
; pal_col(9,0x26);
;
	lda     #$09
	jsr     pusha
	lda     #$26
	jsr     _pal_col
;
; pal_col(10,0x16);
;
	lda     #$0A
	jsr     pusha
	lda     #$16
	jsr     _pal_col
;
; pal_col(11,0x16);
;
	lda     #$0B
	jsr     pusha
	lda     #$16
	jsr     _pal_col
;
; unrle_vram(screen_title_color_18,0x23c0);
;
	lda     #<(_screen_title_color_18)
	ldx     #>(_screen_title_color_18)
	jsr     pushax
	ldx     #$23
	lda     #$C0
	jsr     _unrle_vram
;
; pal_col(13,0x3d);
;
	lda     #$0D
	jsr     pusha
	lda     #$3D
	jsr     _pal_col
;
; pal_col(14,0x2e);
;
	lda     #$0E
	jsr     pusha
	lda     #$2E
	jsr     _pal_col
;
; pal_col(15,0x2e);
;
	lda     #$0F
	jsr     pusha
	lda     #$2E
	jsr     _pal_col
;
; unrle_vram(screen_title_color_19,0x23d0);
;
	lda     #<(_screen_title_color_19)
	ldx     #>(_screen_title_color_19)
	jsr     pushax
	ldx     #$23
	lda     #$D0
	jsr     _unrle_vram
;
; unrle_vram(screen_title,0x2020);
;
	lda     #<(_screen_title)
	ldx     #>(_screen_title)
	jsr     pushax
	ldx     #$20
	txa
	jsr     _unrle_vram
;
; put_str(NTADR(10,20),"PRESS START");
;
	jsr     decsp4
	lda     #$8A
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$22
	sta     (sp),y
	lda     #<(L0001)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(L0001)
	sta     (sp),y
	jsr     _put_str
;
; music_play(music_sarabande);
;
	lda     #<(_music_sarabande)
	ldx     #>(_music_sarabande)
	jsr     _music_play
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; ppu_waitnmi(); //wait for next TV frame
;
L057E:	jsr     _ppu_waitnmi
;
; frame+=1;
;
	inc     _frame
;
; if ((frame%30)==1){star.x=rand8();
;
	lda     _frame
	jsr     pusha0
	lda     #$1E
	jsr     tosumoda0
	cpx     #$00
	bne     L0584
	cmp     #$01
	bne     L0584
	jsr     _rand8
	ldx     #$00
	sta     _star
	stx     _star+1
;
; star.y=rand8()%50+50;
;
	jsr     _rand8
	jsr     pushax
	lda     #$32
	jsr     tosumoda0
	clc
	adc     #$32
	bcc     L058C
	inx
L058C:	sta     _star+2
	stx     _star+2+1
;
; if (color_flag%2){pal_col(1,0x20);} else {pal_col(1,0x16); } 
;
	lda     _color_flag
	and     #$01
	beq     L058D
	lda     #$01
	jsr     pusha
	lda     #$20
	jmp     L07AC
L058D:	lda     #$01
	jsr     pusha
	lda     #$16
L07AC:	jsr     _pal_col
;
; color_flag+=1;} 
;
	inc     _color_flag
;
; sprite(&star);
;
L0584:	lda     #<(_star)
	ldx     #>(_star)
	jsr     pushax
	jsr     _sprite
;
; if (is_pressed(PAD_START)){sfx_play(SFX_CHANGE,0);
;
	lda     #$08
	jsr     pusha
	jsr     _is_pressed
	stx     tmp1
	ora     tmp1
	beq     L057E
	lda     #$00
	jsr     pusha
	jsr     _sfx_play
;
; music_stop();
;
	jsr     _music_stop
;
; frame=0;
;
	lda     #$00
	sta     _frame
;
; player.y=220;
;
	sta     _player+2+1
	lda     #$DC
	sta     _player+2
;
; screen_fade_out(5);
;
	lda     #$05
	jsr     pusha0
	jsr     _screen_fade_out
;
; delay(100);
;
	lda     #$64
	jsr     _delay
;
; ppu_off();set_vram_update(0,0);vram_adr(0x2000);vram_fill(0,1024);goto prep_1st;} 
;
	jsr     _ppu_off
	lda     #$00
	jsr     pusha
	tax
	jsr     _set_vram_update
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
	lda     #$00
	jsr     pusha
	ldx     #$04
	jsr     _vram_fill
;
; pal_col(0,0x2e);
;
	lda     #$00
	jsr     pusha
	lda     #$2E
	jsr     _pal_col
;
; pal_col(1,0x20);
;
	lda     #$01
	jsr     pusha
	lda     #$20
	jsr     _pal_col
;
; put_str(NTADR(12,13),"1ST STAGE");
;
	jsr     decsp4
	lda     #$AC
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$21
	sta     (sp),y
	lda     #<(L0001+12)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(L0001+12)
	sta     (sp),y
	jsr     _put_str
;
; put_str(NTADR(12,16),"OUTBREAK");
;
	jsr     decsp4
	lda     #$0C
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$22
	sta     (sp),y
	lda     #<(L0001+22)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(L0001+22)
;
; goto game;
;
	jmp     L07C3
;
; pal_col(0,0x11);
;
L05DD:	lda     #$00
	jsr     pusha
	lda     #$11
	jsr     _pal_col
;
; pal_col(1,0x20);
;
	lda     #$01
	jsr     pusha
	lda     #$20
	jsr     _pal_col
;
; put_str(NTADR(12,13),"2ND STAGE");
;
	jsr     decsp4
	lda     #$AC
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$21
	sta     (sp),y
	lda     #<(L0001+31)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(L0001+31)
	sta     (sp),y
	jsr     _put_str
;
; put_str(NTADR(11,16),"BROKEN TIME");
;
	jsr     decsp4
	lda     #$0B
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$22
	sta     (sp),y
	lda     #<(L0001+41)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(L0001+41)
;
; goto game;
;
	jmp     L07C3
;
; pal_col(0,0x16);
;
L0605:	lda     #$00
	jsr     pusha
	lda     #$16
	jsr     _pal_col
;
; pal_col(1,0x20);
;
	lda     #$01
	jsr     pusha
	lda     #$20
	jsr     _pal_col
;
; put_str(NTADR(12,13),"3RD STAGE");
;
	jsr     decsp4
	lda     #$AC
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$21
	sta     (sp),y
	lda     #<(L0001+53)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(L0001+53)
	sta     (sp),y
	jsr     _put_str
;
; put_str(NTADR(10,16),"OUT OF CONTROL");
;
	jsr     decsp4
	lda     #$0A
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$22
	sta     (sp),y
	lda     #<(L0001+63)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(L0001+63)
;
; goto game;
;
	jmp     L07C3
;
; pal_col(0,0x0);
;
L062D:	lda     #$00
	jsr     pusha
	jsr     _pal_col
;
; pal_col(1,0x20);
;
	lda     #$01
	jsr     pusha
	lda     #$20
	jsr     _pal_col
;
; put_str(NTADR(11,13),"FINAL STAGE");
;
	jsr     decsp4
	lda     #$AB
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$21
	sta     (sp),y
	lda     #<(L0001+78)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(L0001+78)
	sta     (sp),y
	jsr     _put_str
;
; put_str(NTADR(13,16),"CRASH");
;
	jsr     decsp4
	lda     #$0D
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$22
	sta     (sp),y
	lda     #<(L0001+90)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(L0001+90)
L07C3:	sta     (sp),y
	jsr     _put_str
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; screen_fade_in();
;
	jsr     _screen_fade_in
;
; delay(600);
;
	lda     #$58
	jsr     _delay
;
; screen_fade_out(5);
;
	lda     #$05
	jsr     pusha0
	jsr     _screen_fade_out
;
; ppu_off();
;
	jsr     _ppu_off
;
; set_vram_update(0,0);
;
	lda     #$00
	jsr     pusha
	tax
	jsr     _set_vram_update
;
; vram_adr(0x2000);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_fill(0,1024);
;
	lda     #$00
	jsr     pusha
	ldx     #$04
	jsr     _vram_fill
;
; music_play(music_battle);
;
	lda     #<(_music_battle)
	ldx     #>(_music_battle)
	jsr     _music_play
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; screen_fade_in();
;
	jsr     _screen_fade_in
;
; put_str(NTADR(3,3),"HELLO");
;
	jsr     decsp4
	lda     #$63
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$20
	sta     (sp),y
	lda     #<(L0001+96)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(L0001+96)
	sta     (sp),y
	jsr     _put_str
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; ppu_waitnmi(); //wait for next TV frame
;
L0663:	jsr     _ppu_waitnmi
;
; if (frame>=100){if (stage==2){time-=rand8()%2+1;} else {time-=1; } 
;
	lda     _frame
	cmp     #$64
	bcc     L0667
	lda     _stage
	cmp     #$02
	bne     L0669
	jsr     _rand8
	and     #$01
	clc
	adc     #$01
	eor     #$FF
	sec
	adc     _time
	sta     _time
	jmp     L066E
L0669:	dec     _time
;
; frame=0;
;
L066E:	lda     #$00
	sta     _frame
;
; boss.x=rand8();
;
	jsr     _rand8
	ldx     #$00
	sta     _boss
	stx     _boss+1
;
; boss.y=rand8();} else {frame+=1; } 
;
	jsr     _rand8
	ldx     #$00
	sta     _boss+2
	stx     _boss+2+1
	jmp     L0677
L0667:	inc     _frame
;
; if (time==0){music_stop();
;
L0677:	lda     _time
	bne     L067A
	jsr     _music_stop
;
; ppu_off();set_vram_update(0,0);vram_adr(0x2000);vram_fill(0,1024);goto game_over;} 
;
	jsr     _ppu_off
	lda     #$00
	jsr     pusha
	tax
	jsr     _set_vram_update
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
	lda     #$00
	jsr     pusha
	ldx     #$04
	jsr     _vram_fill
	jmp     L0780
;
; sprite(&boss);
;
L067A:	lda     #<(_boss)
	ldx     #>(_boss)
	jsr     pushax
	jsr     _sprite
;
; memcpy(game_nmi_list,game_nmi_init,sizeof(game_nmi_init));set_vram_update(24,game_nmi_list);game_nmi_list[2]=0x34;game_nmi_list[5]=0x29;game_nmi_list[8]=0x2d;game_nmi_list[11]=0x25;game_nmi_list[14]=0x1a;game_nmi_list[17]=0x10+ time/10%10;game_nmi_list[20]=0x10+ time%10;game_nmi_list[23]=0;game_nmi_list[26]=0x33;game_nmi_list[29]=0x23;game_nmi_list[32]=0x2f;game_nmi_list[35]=0x32;game_nmi_list[38]=0x25;game_nmi_list[41]=0x1a;game_nmi_list[44]=0x10+ score/10%10;game_nmi_list[47]=0x10+ score%10;game_nmi_list[50]=0;game_nmi_list[53]=0x33;game_nmi_list[56]=0x30;game_nmi_list[59]=0x25;game_nmi_list[62]=0x25;game_nmi_list[65]=0x24;game_nmi_list[68]=0x1a;game_nmi_list[71]=0x10+ speed/3;
;
	ldy     #$47
L068E:	lda     _game_nmi_init,y
	sta     _game_nmi_list,y
	dey
	bpl     L068E
	lda     #$18
	jsr     pusha
	lda     #<(_game_nmi_list)
	ldx     #>(_game_nmi_list)
	jsr     _set_vram_update
	lda     #$34
	sta     _game_nmi_list+2
	lda     #$29
	sta     _game_nmi_list+5
	lda     #$2D
	sta     _game_nmi_list+8
	lda     #$25
	sta     _game_nmi_list+11
	lda     #$1A
	sta     _game_nmi_list+14
	lda     _time
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	jsr     pushax
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$10
	sta     _game_nmi_list+17
	lda     _time
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$10
	sta     _game_nmi_list+20
	lda     #$00
	sta     _game_nmi_list+23
	lda     #$33
	sta     _game_nmi_list+26
	lda     #$23
	sta     _game_nmi_list+29
	lda     #$2F
	sta     _game_nmi_list+32
	lda     #$32
	sta     _game_nmi_list+35
	lda     #$25
	sta     _game_nmi_list+38
	lda     #$1A
	sta     _game_nmi_list+41
	lda     _score
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	jsr     pushax
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$10
	sta     _game_nmi_list+44
	lda     _score
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$10
	sta     _game_nmi_list+47
	lda     #$00
	sta     _game_nmi_list+50
	lda     #$33
	sta     _game_nmi_list+53
	lda     #$30
	sta     _game_nmi_list+56
	lda     #$25
	sta     _game_nmi_list+59
	sta     _game_nmi_list+62
	lda     #$24
	sta     _game_nmi_list+65
	lda     #$1A
	sta     _game_nmi_list+68
	lda     _speed
	jsr     pusha0
	lda     #$03
	jsr     tosudiva0
	clc
	adc     #$10
	sta     _game_nmi_list+71
;
; if (stage<=3){if (is_pressed(PAD_LEFT)&&player.x>0){player.x-=2;} 
;
	lda     _stage
	cmp     #$04
	bcs     L06DF
	lda     #$40
	jsr     pusha
	jsr     _is_pressed
	stx     tmp1
	ora     tmp1
	beq     L06E1
	lda     _player
	cmp     #$01
	lda     _player+1
	sbc     #$00
	bvs     L06E5
	eor     #$80
L06E5:	bpl     L06E1
	lda     _player
	sec
	sbc     #$02
	sta     _player
	bcs     L06E1
	dec     _player+1
;
; if (is_pressed(PAD_RIGHT)&&player.x<232){player.x+=2;} } else {delta=rand8();
;
L06E1:	lda     #$80
	jsr     pusha
	jsr     _is_pressed
	stx     tmp1
	ora     tmp1
	beq     L06FC
	lda     _player
	cmp     #$E8
	lda     _player+1
	sbc     #$00
	bvc     L06EE
	eor     #$80
L06EE:	bpl     L06FC
	lda     #$02
	clc
	adc     _player
	sta     _player
	bcc     L06FC
	inc     _player+1
	jmp     L06FC
L06DF:	jsr     _rand8
	sta     _delta
;
; if (delta%2){player.x-=delta%3;} 
;
	and     #$01
	beq     L06F6
	lda     _delta
	jsr     pusha0
	lda     #$03
	jsr     tosumoda0
	eor     #$FF
	sec
	adc     _player
	sta     _player
	txa
	eor     #$FF
	adc     _player+1
	sta     _player+1
;
; delta=rand8();
;
L06F6:	jsr     _rand8
	sta     _delta
;
; if (delta%2){player.x+=delta%3;}  } 
;
	and     #$01
	beq     L06FC
	lda     _delta
	jsr     pusha0
	lda     #$03
	jsr     tosumoda0
	clc
	adc     _player
	sta     _player
	txa
	adc     _player+1
	sta     _player+1
;
; sprite(&player);
;
L06FC:	lda     #<(_player)
	ldx     #>(_player)
	jsr     pushax
	jsr     _sprite
;
; if (is_pressed(PAD_A)&&is_attacking==0){is_attacking=1;
;
	lda     #$01
	jsr     pusha
	jsr     _is_pressed
	stx     tmp1
	ora     tmp1
	beq     L070D
	lda     _is_attacking
	bne     L070D
	lda     #$01
	sta     _is_attacking
;
; mountain.x=player.x;
;
	lda     _player
	sta     _mountain
	lda     _player+1
	sta     _mountain+1
;
; mountain.y=220;
;
	ldx     #$00
	lda     #$DC
	sta     _mountain+2
	stx     _mountain+2+1
;
; if (stage>=3){speed=rand8()%5;} } 
;
	lda     _stage
	cmp     #$03
	bcc     L070D
	jsr     _rand8
	jsr     pushax
	lda     #$05
	jsr     tosumoda0
	sta     _speed
;
; if (is_attacking>0){is_attacking+=1;
;
L070D:	lda     _is_attacking
	jeq     L0711
	inc     _is_attacking
;
; mountain.y-=speed;
;
	lda     _speed
	eor     #$FF
	sec
	adc     _mountain+2
	sta     _mountain+2
	lda     #$FF
	adc     _mountain+2+1
	sta     _mountain+2+1
;
; if (mountain.y>0){if (mountain.y>=boss.y&&mountain.y<=boss.y+16&&mountain.x>=boss.x&&mountain.x<=boss.x+24){sfx_play(SFX_ATTACK,0);
;
	lda     _mountain+2
	cmp     #$01
	lda     _mountain+2+1
	sbc     #$00
	bvs     L0719
	eor     #$80
L0719:	jpl     L0717
	lda     _mountain+2
	cmp     _boss+2
	lda     _mountain+2+1
	sbc     _boss+2+1
	bvs     L07AA
	eor     #$80
L07AA:	jpl     L071A
	lda     _mountain+2
	ldx     _mountain+2+1
	jsr     pushax
	lda     _boss+2
	ldx     _boss+2+1
	clc
	adc     #$10
	bcc     L071D
	inx
L071D:	jsr     tosicmp
	beq     L07AD
	jpl     L071A
L07AD:	lda     _mountain
	cmp     _boss
	lda     _mountain+1
	sbc     _boss+1
	bvs     L07AB
	eor     #$80
L07AB:	jpl     L071A
	lda     _mountain
	ldx     _mountain+1
	jsr     pushax
	lda     _boss
	ldx     _boss+1
	clc
	adc     #$18
	bcc     L071E
	inx
L071E:	jsr     tosicmp
	bmi     L071B
	jne     L071A
L071B:	lda     #$01
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; is_attacking=0;
;
	lda     #$00
	sta     _is_attacking
;
; star.x=mountain.x-4;
;
	lda     _mountain
	ldx     _mountain+1
	sec
	sbc     #$04
	bcs     L0727
	dex
L0727:	sta     _star
	stx     _star+1
;
; star.y=mountain.y;
;
	lda     _mountain+2
	sta     _star+2
	lda     _mountain+2+1
	sta     _star+2+1
;
; sprite(&star);
;
	lda     #<(_star)
	ldx     #>(_star)
	jsr     pushax
	jsr     _sprite
;
; score+=6-(speed/3);
;
	lda     #$06
	jsr     pusha0
	lda     _speed
	jsr     pusha0
	lda     #$03
	jsr     tosudiva0
	jsr     tossubax
	clc
	adc     _score
	sta     _score
;
; if (score>100){music_stop();
;
	cmp     #$65
	jcc     L0663
	jsr     _music_stop
;
; time=15;
;
	lda     #$0F
	sta     _time
;
; score=0;
;
	lda     #$00
	sta     _score
;
; frame=101;
;
	lda     #$65
	sta     _frame
;
; stage+=1;
;
	inc     _stage
;
; if (stage==2){ppu_off();set_vram_update(0,0);vram_adr(0x2000);vram_fill(0,1024);goto prep_2nd;} else if (stage==3){ppu_off();set_vram_update(0,0);vram_adr(0x2000);vram_fill(0,1024);goto prep_3rd;} else if (stage==4){ppu_off();set_vram_update(0,0);vram_adr(0x2000);vram_fill(0,1024);goto prep_4th;} else {ppu_off();set_vram_update(0,0);vram_adr(0x2000);vram_fill(0,1024);goto game_clear; } } } else {sprite(&mountain); } } else {is_attacking=0; } } else {if (is_pressed(PAD_UP)&&speed<15){speed+=1;} else if (is_pressed(PAD_DOWN)&&speed>1){speed-=1;}  } 
;
	lda     _stage
	cmp     #$02
	bne     L073A
	jsr     _ppu_off
	lda     #$00
	jsr     pusha
	tax
	jsr     _set_vram_update
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
	lda     #$00
	jsr     pusha
	ldx     #$04
	jsr     _vram_fill
	jmp     L05DD
L073A:	lda     _stage
	cmp     #$03
	bne     L0746
	jsr     _ppu_off
	lda     #$00
	jsr     pusha
	tax
	jsr     _set_vram_update
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
	lda     #$00
	jsr     pusha
	ldx     #$04
	jsr     _vram_fill
	jmp     L0605
L0746:	lda     _stage
	cmp     #$04
	bne     L0752
	jsr     _ppu_off
	lda     #$00
	jsr     pusha
	tax
	jsr     _set_vram_update
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
	lda     #$00
	jsr     pusha
	ldx     #$04
	jsr     _vram_fill
	jmp     L062D
L0752:	jsr     _ppu_off
	lda     #$00
	jsr     pusha
	tax
	jsr     _set_vram_update
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
	lda     #$00
	jsr     pusha
	ldx     #$04
	jsr     _vram_fill
	jmp     L0794
L071A:	lda     #<(_mountain)
	ldx     #>(_mountain)
	jsr     pushax
	jsr     _sprite
	jmp     L0663
L0717:	lda     #$00
	sta     _is_attacking
	jmp     L0663
L0711:	lda     #$10
	jsr     pusha
	jsr     _is_pressed
	stx     tmp1
	ora     tmp1
	beq     L076F
	lda     _speed
	cmp     #$0F
	bcs     L076F
	inc     _speed
	jmp     L0663
L076F:	lda     #$20
	jsr     pusha
	jsr     _is_pressed
	stx     tmp1
	ora     tmp1
	jeq     L0663
	lda     _speed
	cmp     #$02
	jcc     L0663
	dec     _speed
;
; }
;
	jmp     L0663
;
; pal_col(0,0x25);
;
L0780:	lda     #$00
	jsr     pusha
	lda     #$25
	jsr     _pal_col
;
; pal_col(1,0x20);
;
	lda     #$01
	jsr     pusha
	lda     #$20
	jsr     _pal_col
;
; put_str(NTADR(2,2),"YOU LOSE");
;
	jsr     decsp4
	lda     #$42
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$20
	sta     (sp),y
	lda     #<(L0001+102)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(L0001+102)
	sta     (sp),y
	jsr     _put_str
;
; sfx_play(SFX_FINISH,0);
;
	lda     #$02
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; while(1);
;
L0793:	jmp     L0793
;
; pal_col(0,0x22);
;
L0794:	lda     #$00
	jsr     pusha
	lda     #$22
	jsr     _pal_col
;
; pal_col(1,0x20);
;
	lda     #$01
	jsr     pusha
	lda     #$20
	jsr     _pal_col
;
; put_str(NTADR(2,2),"YOU WIN");
;
	jsr     decsp4
	lda     #$42
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$20
	sta     (sp),y
	lda     #<(L0001+111)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(L0001+111)
	sta     (sp),y
	jsr     _put_str
;
; sfx_play(SFX_FINISH,0);
;
	lda     #$02
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; while(1);
;
L07A7:	jmp     L07A7

.endproc

